AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Network Template (ipv6 enable)
Parameters:
  VPCCIDR:
    Description: First and Second Octet of VPC, For example xxx.xxx
    Type: String
    Default: '192.168'
    ConstraintDescription: xxx.xxx
  NameTagPrefix:
    Type: String
    Default: test-ipv6
    Description: Prefix of Name tags.
Mappings:
  StackConfig:
    VPC:
      CIDR: .0.0/20
    FrontendSubnet1:
      CIDR: .0.0/24
    FrontendSubnet2:
      CIDR: .1.0/24
    ApplicationSubnet1:
      CIDR: .4.0/24
    ApplicationSubnet2:
      CIDR: .5.0/24
    DatastoreSubnet1:
      CIDR: .8.0/24
    DatastoreSubnet2:
      CIDR: .9.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, VPC,
            CIDR]}]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-VPC'
  Ipv6VPCCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref 'VPC'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-IGW'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref 'VPC'

  FrontendRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-FrontendRoute'
  FrontendRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'FrontendRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  FrontendRouteV6:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'FrontendRouteTable'
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref 'InternetGateway'

  ApplicationRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-ApplicationRoute'
  ApplicationRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'ApplicationRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
  ApplicationRouteV6:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'ApplicationRouteTable'
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref 'EgressOnlyInternetGateway'

  DatastoreRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-DatastoreRoute'

  FrontendSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
    - AttachGateway
    - Ipv6VPCCidrBlock
    Properties:
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}]
      CidrBlock: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, FrontendSubnet1,
            CIDR]}]
      Ipv6CidrBlock: !Sub ['${Param1}00::/64', {Param1: !Select ['0', !Split ['00::/',
              !Select [0, !GetAtt 'VPC.Ipv6CidrBlocks']]]}]
      AssignIpv6AddressOnCreation: true
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-FrontendSubnet1'
      VpcId: !Ref 'VPC'
  FrontendSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'FrontendSubnet1'
      RouteTableId: !Ref 'FrontendRouteTable'

  FrontendSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
    - AttachGateway
    - Ipv6VPCCidrBlock
    Properties:
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}]
      CidrBlock: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, FrontendSubnet2,
            CIDR]}]
      Ipv6CidrBlock: !Sub ['${Param1}01::/64', {Param1: !Select ['0', !Split ['00::/',
              !Select [0, !GetAtt 'VPC.Ipv6CidrBlocks']]]}]
      AssignIpv6AddressOnCreation: true
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-FrontendSubnet2'
      VpcId: !Ref 'VPC'
  FrontendSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'FrontendSubnet2'
      RouteTableId: !Ref 'FrontendRouteTable'

  ApplicationSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
    - AttachGateway
    - Ipv6VPCCidrBlock
    Properties:
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}]
      CidrBlock: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, ApplicationSubnet1,
            CIDR]}]
      Ipv6CidrBlock: !Sub ['${Param1}04::/64', {Param1: !Select ['0', !Split ['00::/',
              !Select [0, !GetAtt 'VPC.Ipv6CidrBlocks']]]}]
      AssignIpv6AddressOnCreation: true
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-ApplicationSubnet1'
      VpcId: !Ref 'VPC'
  ApplicationSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'ApplicationSubnet1'
      RouteTableId: !Ref 'ApplicationRouteTable'

  ApplicationSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - AttachGateway
      - Ipv6VPCCidrBlock
    Properties:
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}]
      CidrBlock: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, ApplicationSubnet2,
            CIDR]}]
      Ipv6CidrBlock: !Sub ['${Param1}05::/64', {Param1: !Select ['0', !Split ['00::/',
              !Select [0, !GetAtt 'VPC.Ipv6CidrBlocks']]]}]
      AssignIpv6AddressOnCreation: true
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-ApplicationSubnet2'
      VpcId: !Ref 'VPC'
  ApplicationSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'ApplicationSubnet2'
      RouteTableId: !Ref 'ApplicationRouteTable'

  DatastoreSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
    - AttachGateway
    - Ipv6VPCCidrBlock
    Properties:
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}]
      CidrBlock: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, DatastoreSubnet1,
            CIDR]}]
      Ipv6CidrBlock: !Sub ['${Param1}08::/64', {Param1: !Select ['0', !Split ['00::/',
              !Select [0, !GetAtt 'VPC.Ipv6CidrBlocks']]]}]
      AssignIpv6AddressOnCreation: true
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-DatastoreSubnet1'
      VpcId: !Ref 'VPC'
  DatastoreSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'DatastoreSubnet1'
      RouteTableId: !Ref 'DatastoreRouteTable'

  DatastoreSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
    - AttachGateway
    - Ipv6VPCCidrBlock
    Properties:
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}]
      CidrBlock: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, DatastoreSubnet2,
            CIDR]}]
      Ipv6CidrBlock: !Sub ['${Param1}09::/64', {Param1: !Select ['0', !Split ['00::/',
              !Select [0, !GetAtt 'VPC.Ipv6CidrBlocks']]]}]
      AssignIpv6AddressOnCreation: true
      Tags:
      - Key: Name
        Value: !Sub '${NameTagPrefix}-DatastoreSubnet2'
      VpcId: !Ref 'VPC'
  DatastoreSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'DatastoreSubnet2'
      RouteTableId: !Ref 'DatastoreRouteTable'
  DatastoreDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
      - !Ref 'DatastoreSubnet1'
      - !Ref 'DatastoreSubnet2'

Outputs:
  VPC:
    Value: !Ref 'VPC'
  Ipv4CidrBlock:
    Value: !GetAtt VPC.CidrBlock
  FrontendSubnet1:
    Value: !Ref 'FrontendSubnet1'
  FrontendSubnet2:
    Value: !Ref 'FrontendSubnet2'
  FrontendSubnet1Ipv4Cidr:
    Value: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, FrontendSubnet1,CIDR]}]
  FrontendSubnet2Ipv4Cidr:
    Value: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, FrontendSubnet2,CIDR]}]
  ApplicationSubnet1:
    Value: !Ref 'FrontendSubnet1'
  ApplicationSubnet2:
    Value: !Ref 'FrontendSubnet2'
  ApplicationSubnet1Ipv4Cidr:
    Value: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, FrontendSubnet1,CIDR]}]
  ApplicationSubnet2Ipv4Cidr:
    Value: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, FrontendSubnet2,CIDR]}]
  DatastoreSubnet1:
    Value: !Ref 'FrontendSubnet1'
  DatastoreSubnet2:
    Value: !Ref 'FrontendSubnet2'
  DatastoreSubnet1Ipv4Cidr:
    Value: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, FrontendSubnet1,CIDR]}]
  DatastoreSubnet2Ipv4Cidr:
    Value: !Sub ['${VPCCIDR}${Param1}', {Param1: !FindInMap [StackConfig, FrontendSubnet2,CIDR]}]
  Ipv6CidrBlock:
    Value: !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]
  FrontendSubnet1Ipv6CidrBlocks:
    Value: !Select [ 0, !GetAtt FrontendSubnet1.Ipv6CidrBlocks ]
  FrontendSubnet2Ipv6CidrBlocks:
    Value: !Select [ 0, !GetAtt FrontendSubnet2.Ipv6CidrBlocks ]
  ApplicationSubnet1Ipv6CidrBlocks:
    Value: !Select [ 0, !GetAtt ApplicationSubnet1.Ipv6CidrBlocks ]
  ApplicationSubnet2Ipv6CidrBlocks:
    Value: !Select [ 0, !GetAtt ApplicationSubnet2.Ipv6CidrBlocks ]
  DatastoreSubnet1Ipv6CidrBlocks:
    Value: !Select [ 0, !GetAtt DatastoreSubnet1.Ipv6CidrBlocks ]
  DatastoreSubnet2Ipv6CidrBlocks:
    Value: !Select [ 0, !GetAtt DatastoreSubnet2.Ipv6CidrBlocks ]
  FrontendRouteTable: 
    Value: !Ref 'FrontendRouteTable'
  ApplicationRouteTable: 
    Value: !Ref 'ApplicationRouteTable'
  DatastoreRouteTable: 
    Value: !Ref 'DatastoreRouteTable'